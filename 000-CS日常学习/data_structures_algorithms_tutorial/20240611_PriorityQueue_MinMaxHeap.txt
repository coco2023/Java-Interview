// 373. Find K Pairs with Smallest Sums
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        if (nums1 == null || nums2 == null)
            return null;

        // init a min-heap (priority queue); each element is an array of three integers: [nums1[i], nums2[j], j]
        // lambda: the pair with the smallest sum is at the top of the heap.
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[0] + a[1] - b[0] - b[1]);
        List<List<Integer>> res = new ArrayList<>();

        // initializes the heap with pairs formed by the first element of nums2 and each element of nums1 up to k elements
        for (int i = 0; i < nums1.length && i < k; i++) {
            queue.offer(new int[] { nums1[i], nums2[0], 0 });
        }

        // The while loop runs until we have extracted k pairs or the heap is empty.
        while (k > 0 && !queue.isEmpty()) {

            int[] curr = queue.poll();  //  the smallest pair (based on sum) is removed from the heap
            
            // This pair is then added to the result list.
            res.add(new ArrayList<>(Arrays.asList(curr[0], curr[1])));

            // push the new pair that contains the next element in nums2 into the queue(with the current element of nums1)
            // ensures that all potential pairs are considered
            if (curr[2] + 1 < nums2.length) {
                queue.offer(new int[] { curr[0], nums2[curr[2] + 1], curr[2] + 1 });
            }
            k--;
        }
        return res;

    }
}

// 295. Find Median from Data Stream
class MedianFinder {

    private PriorityQueue<Integer> maxHeap;
    private PriorityQueue<Integer> minHeap;

    public MedianFinder() {
        // This heap stores the smaller half of the numbers. 
        // The largest number in this heap is at the root
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());  // converts the default min-heap into a max-heap
        // This heap stores the larger half of the numbers. 
        // The smallest number in this heap is at the root
        minHeap = new PriorityQueue<>();
    }

    public void addNum(int num) {
        maxHeap.offer(num);
        minHeap.offer(maxHeap.poll());

        if (minHeap.size() > maxHeap.size()) {
            maxHeap.offer(minHeap.poll());
        }
    }

    public double findMedian() {
        if (maxHeap.size() == minHeap.size()) {
            return (maxHeap.peek() + minHeap.peek()) / 2.0;
        } else {
            return maxHeap.peek();
        }
    }
}


// 23. Merge k Sorted Lists
class Solution {

    public ListNode mergeKList(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>(Comparator.comparingInt(node -> node.val));

        for (ListNode node : lists) {
            pq.offer(node);
        }

        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;

        while (!pq.isEmpty()) {
            ListNode node = pq.poll();

            curr.next = node;
            curr = curr.next;

            if (node.next != null) {
                pq.offer(node.next);
            }
        }
    }
}

# LC Q

1. **LeetCode 215 - Kth Largest Element in an Array**: Find the kth largest element in an unsorted array. You can use a min-heap of size `k` to efficiently solve this problem.
2. **LeetCode 378 - Kth Smallest Element in a Sorted Matrix**: Given an n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element. A min-heap can be used to solve this problem efficiently.
3. **LeetCode 973 - K Closest Points to Origin**: Given an array of points in the plane, find the `K` closest points to the origin. You can use a max-heap of size `K` to keep track of the closest points.
4. **LeetCode 295 - Find Median from Data Stream**: You need to continuously find the median as numbers are added to a data stream. A combination of two heaps (a max-heap for the lower half and a min-heap for the upper half) can solve this problem efficiently.
5. **LeetCode 347 - Top K Frequent Elements**: Given an integer array, return the `k` most frequent elements. A min-heap of size `k` can be used to keep track of the top `k` elements.
6. **LeetCode 621 - Task Scheduler**: Given a list of tasks and a cooling interval, determine the minimum time needed to complete all tasks. A max-heap can be used to schedule tasks efficiently.
