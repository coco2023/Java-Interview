class Solution{

          /**
          * 20240407
          **/
          
          // 5. Greddy Algorithm
          // Knapsack Problem

          // refer: https://blog.csdn.net/qq_35831906/article/details/134389919

          // BM96 主持人调度（二）https://www.nowcoder.com/practice/4edf6e6d01554870a12f218c94e8a299?tpId=295&tqId=1267319&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj

          public int minPeople(int n, int[][] startEnd) {
                    int[] start = new int[n];
                    int[] end = new int[n];

                    for (int i = 0; i < n; i++) {
                              start[i] = startEnd[i][0];
                              end[i] = startEnd[i][1];
                    }

                    Arrays.sort(start, 0, start.length);
                    Arrays.sort(end, 0, end.length);

                    int res = 0;
                    int j = 0;
                    for (int i = 0; i < n; i++) {
                              if (start[i] < end[j]) {
                                        res++;
                              } else { // start[i] >= end[j]
                                        j++;                                        
                              }
                    }

                    return res;
          }

          class TimeEvent implements Comparable<TimeEvent> {
                    int time;
                    boolean isStart;

                    TimeEvent(int time, boolean isStart) {
                              this.time = time;
                              this.isStart = isStart;
                    }

                    @Override
                    public int compareTo(TimeEvent o) {
                              if (this.time != o.time) {
                                        return this.time - o.time;
                              }
                              return this.isStart ? 1 : -1;
                    }
          }

          // BM89 合并区间 https://www.nowcoder.com/practice/69f4e5b7ad284a478777cb2a17fb5e6a?tpId=295&tqId=691
          public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
                    if (intervals.size() <= 1) {
                              return intervals;
                    }

                    Collections.sort(intervals, new Compartor<Interval>() {
                              public int compare(Interval i1, Interval i2) {
                                        return i1.start - i2.start;
                              }
                    });

                    ArrayList<Interval> result = new ArrayList<>();
                    Interval prev = intervals.get(0);
                    for (int i = 1; i < intervals.size(); i++) {
                              Interval curr = intervals.get(i);
                              if (curr.start <= prev.end) {
                                        prev.end = Math.max(prev.end, curr.end);
                              } else { // curr.start > prev.end
                                        result.add(prev);
                                        prev = curr;
                              }
                    }

                    result.add(prev);
                    return result;
          }

          // DP
          // BM64 最小花费爬楼梯  https://www.nowcoder.com/practice/6fe0302a058a4e4a834ee44af88435c7?tpId=295&tqId=2366451&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj
          public int minCost (int[] cost) {
                    int[] dp = new int[cost.length + 1];
                    for (int i = 2; i <= cost.length; i++) {
                              dp[i] += Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
                    } 

                    return dp[cost.length];
          }


          /**
          *  20240409
          **/
          // BM62 斐波那契数列
          public int feb (int n) {
                    if (n <= 1) return n;

                    int first = 0;
                    int second = 1;
                    for (i = 2; i <= n; i++) {
                              int temp = second;
                              second += first;
                              first = temp;
                    }

                    return second;
          }
          
          // BM63 跳台阶
          public int jumpFloor (int n) {
                    if (n <= 1) return n;
                    
                    int first = 1;
                    int second = 1;
                    for (int i = 2; i <= n; i++) {
                              int temp = second;
                              second += first;
                              first = temp;
                    }

                    return second;
          }

          // BM64 最小花费爬楼梯
          public int minClimbStairs (int[] cost) {
                    int[] dp = new int[cost.length + 1];

                    for (int i = 2; i <= cost.length; i++) {
                              dp[i] = Math.min(cost[i - 1] + dp[i - 1], costp[i - 2] + dp[i - 2]);
                    }

                    return dp[cost.length];
          }

          // BM66 最长公共子串长度
          public int LCS (String s1, String s2) {
                    int m = s1.length;
                    int n = s2.length;
                    int[][] dp = new int[n + 1][m + 1];
                    int maxLength = 0;

                    for (int i = 1; i <= n; i++) {
                              for (int j = 1; j <= m; j++) {
                                        if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                                                  dp[i][j] = dp[i - 1][j - 1] + 1;
                                                  maxLength = Math.max(maxLength, dp[i][j]);
                                        } else {
                                                  dp[i][j] = 0;
                                        }
                              }
                    }
                    return maxLength;
          }

          // BM66 最长公共子串
          public int LCS (String s1, String s2) {
                    int n = s1.length();
                    int m = s2.length();
                    int[][] dp = new int[n + 1][m + 1];
                    int maxLength = 0;
                    int pos = -1;

                    for (int i = 1; i <= n; i++) {
                              for (int j = 1; j <= m; j++) {
                                        if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                                                  dp[i][j] = dp[i - 1][j - 1] + 1;
                                                  if (maxLength < dp[i][j]) {
                                                            maxLength = dp[i][j];
                                                            pos = i;
                                                  }
                                        } else {
                                                  dp[i][j] = 0;
                                        }

                              }
                    }
                    return pos == - 1 ? "" : s1.substring(pos - maxLength, pos);
          }

          // BM65 最长公共子序列(二)
          public String LCS2 (String str1, String srr2) {
                    int n = str1.length();
                    int m = str2.length();
                    int[][] dp = new int[n + 1][m + 1];

                    for (int i = 1; i <= n; i++) {
                              for (int j = 1; j <= m; j++) {
                                        if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                                                  dp[i][j] = dp[i - 1][j - 1] + 1;
                                        } else {
                                                  dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                                        }
                              }
                    }
                    if (do[n][m] == 0) {
                              return "-1";
                    }

                    StringBuilder lcs = new StringBuilder();
                    int i = n, j = m;
                    while (i > 0 && j > 0) {
                              if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                                        lcs.append(str.charAt(i - 1));
                                        i--;
                                        j--;
                              } else if (dp[i - 1][j] > dp[i][j - 1]) {
                                        i--;
                              } else {
                                        j--;
                              }
                    }

                    return lcs.reverse().toString();
          }

          // BM67 不同路径的数目(一)
          public int uniquePath (int m, int n) {
                    int[][] dp = new int[m][n]

                    for (int i = 0; i < m; i++) {
                              dp[i][0] = 1;
                    }
                    for (int j = 0; j < n; j++) {
                              dp[0][j] = 1;
                    }

                    for (int i = 1; i < m; i++) {
                              for (int j = 1; j < n; j++) {
                                        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                              }
                    }

                    return dp[m - 1][n - 1];                    
          }

          // JZ85 连续子数组的最大和(二) *
          public int[] findGreatestSumArray (int[] array) {
                    if (array == null || array.length == 0) return new int[0];

                    int maxSum = array[0];
                    int currentSum = array[0];
                    int tempStart = 0;
                    int start = 0;
                    int end = 0;

                    for (int i = 1; i < array.length; i++) {
                              if (currentSum < 0) {
                                        currentSum = array[i];
                                        tempStart = i;
                              } else {
                                        currentSum += array[i];
                              }

                              if (currentSum > maxSum || (currentSum == maxSum && (i - tempStart > end - start))) {
                                        maxSum = currentSum;
                                        start = tempStart;
                                        end = i;
                              }
                    }

                    int[] result = new int[end - start + 1];
                    for (int i = start; i <= end; i++) {
                              result[i - start] = array[i];
                    }
                    return result;
          }

          // BM68 矩阵的最小路径和
          public int minPathSum (int[][] matrix) {
                    int m = matrix.length;
                    int n = matrix[0].length;
                    int[][] dp = new int[m + 1][n + 1];
                    dp[0][0] = matrix[0][0];

                    for (int i = 1; i < m; i++) {
                              dp[i][0] = matrix[i][0] + dp[i - 1][0];
                    }

                    for (int j = 1; j < n; j++) {
                              dp[0][j] = matrix[0][j] + dp[0][j - 1];
                    }

                    for (int i = 1; i < m; i++) {
                              for (int j = 1; j < n; j++) {
                                        dp[i][j] = matrix[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
                              }
                    }

                    return dp[m - 1][n - 1];
          }

          // BM69 把数字翻译成字符串
          public int solve (String s) {
                    // oneDigit towDigit
                    int n = s.length();

                    int[] dp = new int[n];
                    dp[0] = 1;
                    dp[1] = 1;
                    for (int i = 2; i <= n; i++) {
                              int oneDigit = Integer.valueOf(s.substring(i - 1, i));
                              int towDigit = Integer.valueOf(s.substring(i - 2, i));
                              if (oneDigit >= 1) dp[i] += dp[i - 1];
                              if (towDigit >= 10 && towDigit <= 26) dp[i] += dp[i - 2];
                    }

                    return dp[n];
          }

          // BM73 最长回文子串
          public int getLongestPali (String A) {
                    if (A == null || A.length() == 0) return 0;

                    int maxLen = 0;
                    int n = A.length();
                    
                    for (int i = 0; i < n; i++) {
                              maxLen = Math.max(maxLen, goAroundCenter(A, i, i));
                              maxLen = Math.max(maxLen, goAroundCenter(A, i, i + 1));
                    }
                    
                    return maxLen;
          }

          private int goAroundCenter (String s, int left, int right) {
                    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
                              left--;
                              right++;
                    }
                    return right - left - 1;
          }

          public void shit () {
                    for (int i = 1; i < n; i++) {
                              if (A.charAt(i) == A.charAt(i - 1)) {
                                        int index = i;
                                        while (index < n) {
                                                  if (A.charAt(i - index - 1) == A.charAt(index)) {
                                                            maxLen = Math.max(maxLen, (index - i) * 2);
                                                            break;
                                                  }
                                                  index++;
                                        }
                              }
                              if (A.charAt(i) == A.charAt(i - 2)) {
                                        while (index < n) {
                                                  if (A.charAt(i - index - 2) == A.charAt(index)) {
                                                            maxLen = Math.max(maxLen, (index - i) * 2 + 1);
                                                            break;
                                                  }
                                                  index++;
                                        }
                              }
                    }

                    return maxLen;

          }

          /** 
          *  20240410
          **/
          // M78 打家劫舍(一)
          public int rob1 (int[] nums) {
                    if (nums.length == 1) return nums[0];
                    int[] dp = new int[nums.length];
                    dp[0] = nums[0];
                    dp[1] = Math.max(nums[0], nums[1]);
                    if (nums.length == 2) return dp[1];
//                     dp[2] = Math.max(dp[0] + nums[2], nums[1]);
//                     if (nums.length == 3) return dp[2];

                    for (int i = 2; i < nums.length; i++) {
                              dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
                    }

                    return dp[nums.length - 1];
          }

          public int rob1 (int[] nums) {
                    if (nums == null || nums.length == 0) return 0;

                    int currMax = 0;
                    int prevMax = 0;
                    for (int i = 0; i < nums.length; i++) {
                              int temp = currMax;
                              currMax = Math.max(currMax, prevMax + nums[i]);
                              prevMax = temp;
                    }

                    return currMax;
        }

          }

          // BM70 兑换零钱(一) * 
          public int minMoney (int[] nums, int aim) {

                    if (aim < 1) return 0;
                    if (nums.length == 0) return -1;

                    int[] dp = new int[aim + 1];
                    for (int i = aim; i >= 0; i--) {
                              dp[i] = aim;
                    }
                    dp[0] = 0;

                    for (int i = 0; i < aim + 1; i++) {
                              for (int j = 0; j < nums.length; j++) {
                                        if (nums[j] <= i) {
                                                  dp[i] = Math.min(dp[i - nums[j]] + 1, dp[i]);
                                        }
                              }
                    }
                    return dp[aim] != aim ? dp[aim] : -1;    // dp[aim] == aim ? -1 : dp[aim]
          }

          // BM79 打家劫舍(二)
          public int rob2 (int[] nums) {
                    if (nums == null || nums.length == 0) return 0;
                    if (nums.length == 1) return nums[0];
                    if (nums.length == 2) return Math.max(nums[0], nums[1]); 

                    int n = nums.length;
                    return Math.max(robLinear(nums, 1, n - 1), robLinear(nums, 0, n - 2));
          }

          public int robLinear (int[] nums, int start, int end) {
                    int prevMax = 0;
                    int currMax = 0;
                    for (int i = start; i <= end, i++) {
                              int temp = currMax;
                              currMax = Math.max(nums[i] + prevMax, currMax);
                              prevMax = temp;
                    }
                    return currMax;
          }

          // BM74 数字字符串转化成IP地址   0-255  *
          public ArrayList<String> restoreIpAddress (String s) {
                    ArrayList<String> result = new ArrayList<>();
                    int n = s.length();

                    for (int i = 1; i <= 3 && i <= n - 3; i++) {
                              for (j = i + 1; j <= i + 3 && j <= n - 2; j++) {
                                        for (int k = j + 1; k <= j + 3 && k <= n - 1; k++) {
                                                  String    s1 = s.substring(0, i),
                                                            s2 = s.substring(i, j),
                                                            s3 = s.substring(j, k),
                                                            s4 = s.substring(k, n);
                                                  if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {
                                                            result.add(s1 + "." + 
                                                                      s2 + "." + 
                                                                      s3 + "." + 
                                                                      s4
                                                            );
                                                  }
                                        }
                              }
                    }
                    return result;
          }

          public boolean isValid (String segment) {
                    if (segment.length() > 3 || segment.length() == 0 || (segment.charAt(0) == '0' && segment.length() > 1) || Integer.parseInt(segment) > 255) {
                              return false;
                    }
                    return true;
          }

          public static void main(String[] args) {
                    Solution solution = new Solution();
                    String ip = "192.168.1.1";
                    System.out.println(solution.isValidIPv4(ip)); // 输出验证结果
          }

          // BM71 最长上升子序列(一)
          public int logestIncreaseList (int[] nums) {
                    if (nums == null || nums.length == 0) return 0;
                    int n = nums.length;
                    int[] dp = new int[n];
                    int maxLen = 0;

                    for (int i = 0; i < n; i++) {
                              dp[i] = 1;
                              for (int j = 0; j < i; j++) {
                                        if (nums[j] < nums[i]) {
                                                  dp[i] = Math.max(dp[i], dp[j] + 1);
                                        } 
                              }
                              maxLen = Math.max(maxLen, dp[i]);
                    }
                    return maxLen;                    
          }
          
          // BM57 岛屿数量
          public int isLandNum (char[][] grid) {
                    if (grid == null || grid.length == 0) return 0;
                    int sum = 0;
                    for (int i = 0; i < grid.length; i++) {
                              for (int j = 0; j < grid[0].length; j++) {
                                        if (grid[i][j] == '1') {
                                                  sum++;
                                                  dfs(grid, i, j);
                                        }
                              }
                    }
                    return sum;
          }

          public void dfs (char[][] grid, int i, int j) {
                    if (i >= grid.length || j >= grid[0].length || i < 0 || j < 0 || grid[i][j] == '0') {
                              return ;
                    }

                    grid[i][j] = '0';

                    dfs(grid, i + 1, j);
                    dfs(grid, i, j + 1);
                    dfs(grid, i - 1, j);
                    dfs(grid, i, j - 1);
          }

}