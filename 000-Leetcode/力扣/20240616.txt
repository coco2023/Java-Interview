// String
// 自制屎山代码
// 71. Simplify Path
class Solution {
    public String simplifyPath(String path) {
        if (path.charAt(0) != '/') return null;

        int n = path.length();
        StringBuilder builder = new StringBuilder();
        Deque<String> queue = new LinkedList<>();
        queue.offer("/");
        int dot = 0;
        int i = 1;

        while (i < n) {
            char c = path.charAt(i);

            if (c == '/') {
                if (path.charAt(i - 1) == '/') {
                    dot = 0;
                    i++;
                    builder.setLength(0);
                    continue;
                } else if (path.charAt(i - 1) == '.' && builder.length() == dot) {                    
                    if (dot == 1) {
                        dot = 0;
                        i++;
                        builder.setLength(0);
                        continue;
                    } else if (dot == 2) {  // the directory up a level
                        if (queue.size() > 2) {
                            queue.pollLast();
                            queue.pollLast();
                        }
                        dot = 0;
                        i++;
                        builder.setLength(0);
                        continue;
                    } else if (dot >= 3) {
                        queue.offer(builder.toString());
                        builder.setLength(0);
                        dot = 0;
                        if (i == (n - 1)) break;
                        queue.offer("/");
                        i++;
                        continue;
                    }                                        
                } else {    // not /../ maybe /asd../asd
                    queue.offer(builder.toString());
                    builder.setLength(0);
                    dot = 0;
                    if (i == n - 1) break;
                    queue.offer("/");
                    i++;
                }
            } else if (c == '.') {
                dot += 1;
                builder.append(c);
                i++;
            } else {
                builder.append(c);
                i++;
            }
        }

        if (builder.length() == dot) {
            if (dot == 2) {
                if (queue.size() > 2) {
                    queue.pollLast();
                    queue.pollLast();
                    builder.setLength(0);
                }
                builder.setLength(0);
            } else if (dot == 1) {
                builder.setLength(0);
            }
        } 

        if (builder.length() != 0) {
            queue.offer(builder.toString());
        }        

        StringBuilder result = new StringBuilder();
        while (!queue.isEmpty()) {
            result.append(queue.poll());
        }

        if (result.charAt(result.length() - 1) == '/' && result.length() > 2) {
            result.setLength(result.length() - 1);
        }
            
        return result.toString();
    }
}

// Chatgpt 简化版
import java.util.Deque;
import java.util.LinkedList;

public class Solution {
    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();
        int n = path.length();
        int i = 0;

        while (i < n) {
            // Skip the initial and consecutive slashes
            while (i < n && path.charAt(i) == '/') {
                i++;
            }

            // Read the next component
            int start = i;
            while (i < n && path.charAt(i) != '/') {
                i++;
            }
            String component = path.substring(start, i);

            // Process the component
            if (component.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pollLast();
                }
            } else if (!component.isEmpty() && !component.equals(".")) {
                stack.offerLast(component);
            }
        }

        // Build the result
        StringBuilder result = new StringBuilder();
        for (String dir : stack) {
            result.append("/").append(dir);
        }

        return result.length() > 0 ? result.toString() : "/";
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.simplifyPath("/home/")); // Output: "/home"
        System.out.println(solution.simplifyPath("/../")); // Output: "/"
        System.out.println(solution.simplifyPath("/home//foo/")); // Output: "/home/foo"
        System.out.println(solution.simplifyPath("/a/./b/../../c/")); // Output: "/c"
    }
}
