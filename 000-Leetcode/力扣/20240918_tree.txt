class LC104 {
          public int maxDepth() {
                    if (root == null) return 0;
                    int maxDepth = 0;

                    Queue<TreeNode> queue = new LinkedList<TreeNode>();
                    queue.offer(root);

                    while (!queue.isEmpty()) {
                              int size = queue.size();

                              while (size > 0) {
                              TreeNode node = queue.poll();

                              if (node.left != null) {
                                        queue.offer(node.left);
                              }

                              if (node.right != null) {
                                        queue.offer(node.right);
                              }

                              size--;
                              }

                              maxDepth++;
                    }

                    return maxDepth;
          }

          public int maxDepthDFS() {
                    if (root == null) return 0;

                    int leftHeight = maxDepth(root.left);
                    int rightHeight = maxDepth(root.right);

                    return Math.max(leftHeight, rightHeight) + 1;
          }
}

// 20240921
class TreeDFS {
          private List<Integer> result = new ArrayList<>();
          private int count = 0;

          public List<Integer> readByDFS(TreeNode root) {
                    dfs(root);
                    return result;
          }

          private void dfs(TreeNode node) {                    
                    if (node == null) return;
                    result.add(node.val);
                    count++;

                    dfs(node.left);
                    dfs(node.right);
          }

          public List<Integer> readByDFSIterative(TreeNode root) {
                    bfs(root);
                    return result; // count;
          }

          private void bfs(TreeNode root) {
                    Stack<TreeNode> stack = new Stack<>();
                    stack.push(root);

                    while (!stack.isEmpty()) {
                              TreeNode node = stack.pop();
                              count++;
                              result.add(node.val);

                              if (node.left != null) {
                                        stack.push(node.left);
                              }
                              if (node.right != null) {
                                        stack.push(node.right);
                              }
                    }
          }
}

class LC530 {

    private int minVal = Integer.MAX_VALUE;
    private TreeNode prevNode;
    private Queue<Integer> nodes = new LinkedList<>();

    public int getMinimumDifference(TreeNode root) {
        helper(root);
        while (!nodes.isEmpty()) {
            System.out.print(nodes.poll() + ";");
        }
        return minVal;
    }

    private void helper(TreeNode node) {
        if (node == null) return;
        
        helper(node.left);

        // nodes.offer(node.val);
        if (prevNode != null) {
            minVal = Math.min(minVal, node.val - prevNode.val);
        }
        prevNode = node;
        
        helper(node.right);
        nodes.offer(node.val);

    }
}