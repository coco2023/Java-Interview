// Binary Search
class BinarySearch {

          public int binarySearch (int[] nums, int target) {
                    int left = 0;
                    int right = nums.length - 1;

                    while (left <= right) {
                              int mid = left + (right - left) / 2;
                              if (nums[mid] == target) return mid;
                              else if (nums[mid] < target) left = mid + 1;
                              else right = mid - 1;
                    }
                    return -1;
          }
          public static void main (String[] args) {
                    int[] nums = {1, 3, 5, 6};
                    BinarySearch bs = new BinarySearch();
                    int res = bs.binarySearch(nums, 3);
                    if (res == -1) System.out.println("not exit!");
                    else System.out.println(res);
          }
}

// Interpolation Search
class InterpolationSearch {
          public int interpolationSearch (int[] arr, int target) {
                    int low = 0;
                    int high = arr.length - 1;

                    while (low <= high && target >= arr[low] && target <= arr[high]) {
                              if (low == high) {
                                        if (arr[low] == target) return low;
                                        return -1;
                              }

                              // Probing the position with keeping uniform distribution in mind.
                              int pos = low + (((high - low) / (arr[high] - arr[low])) * (target - arr[low]));

                              if (arr[pos] == target) return pos;
                              else if (arr[pos] < target) low = pos + 1;
                              else high = post - 1;
                    }

                    return -1;
          }
}

// HashTable: not thread-safe.
// buckets: An array of LinkedList<HashNode>, each list contains hash nodes that hash to the same bucket
// resize Method: Doubles the number of buckets and rehashes all existing keys when the load factor exceeds a certain threshold (0.7 in this case)
// resize() outer Loop: To access each bucket (which is a list) in the old array of buckets.
// resize() Inner Loop: To access each key-value pair within the bucket so that they can be rehashed and inserted into the new bucket array according to the new number of buckets.
// 
// in below provided example, the keys are of type String, which already has appropriate hashCode() and equals() implementations. Therefore, no additional overrides are needed unless you switch to a custom key type.
// However, For the HashTable implementation provided, if you are using a custom class as keys, then yes, you should override hashCode() and equals() methods for the keys. This ensures that two equivalent keys (as determined by the logic in equals()) will hash to the same bucket index and can be identified as the same key by the hash table.
class HashTable {
          private class HashNode {
                    String key;
                    int value;
                    HashNode next;

                    public HashNode(String key, int value) {
                              this.key = key;
                              this.value = value;
                    }
          }

          private LinkedList<HashNode>[] buckets;
          private int numBuckets;                           // capacity
          private int size;                                 // number of key-value pairs in the hash table

          public HashTable () {
                    numBuckets = 10;                        // initial capacity
                    buckets = new LinkedList[numBuckets];
                    for (int i = 0; i < numBuckets; i++) {
                              buckets[i] = new LinkedList<>();
                    }
                    size = 0;
          }

          private int getBucketIndex(String key) {
                    int hashCode = key.hashCode();
                    int index = Math.abs(hashCode) % numBuckets;
                    return index;
          }

          public void insert (String key, int value) {
                    int bucketIndex = getBucketIndex(key);
                    LinkedList<HashNode> bucket = buckets[bucketIndex];

                    for (HashNode node : bucket) {
                              if (node.key.equals(key)) {
                                        node.value = value;
                                        return;
                              }
                    }

                    HashNode newNode = new HashNode(key, value);
                    bucket.addFirst(newNode);
                    size++;

                    if ((1.0 * size) / numBuckets >= 0.7) resize();      
          }

          private void resize () {
                    LinkedList<HashNode>[] temp = buckets;
                    numBuckets = 2 * numBuckets;
                    bucket = new LinkedList[numBuckets];
                    for (int i = 0; i < numBuckets; i++) {
                              buckets[i] = new LinkedList<>();
                    }

                    size = 0;
                    for (LinkedList<HashNode> bucket : temp) {
                              for (HashNode node : bucket) {
                                        insert(node.key, node.value);
                              }
                    }
          }

          public int search (String key) {
                    int bucketIndex = getBucketIndex(key);
                    LinkedList<HashNode> bucket = buckets[bucketIndex];

                    for (HashNode node : bucket) {
                              if (node.key.equals(key)) {
                                        return node.value;
                              }
                    }
                    return -1;
          }

          public int delete (String key) {
                    int bucketIndex = getBucketIndex(key);
                    HashNode prev = null;
                    LinkedList<HashNode> bucket = buckets[bucketIndex];

                    for (HashNode node : bucket) {
                              if (node.key.equals(key)) {
                                        if (prev != null) {
                                                  prev.next = node.next;
                                        } else {
                                                  bucket.remove(node);
                                        }
                                        size--;
                                        return;
                              }
                              prev = node;
                    }
          }

          public int size () {
                    return size;
          }
          
          public boolean isEmpty () {
                    return size == 0;
          }

          public static void main (String[] args) {
                    HashTable ht = new HashTable();
                    ht.insert("key1", 100);
                    ht.insert("key2", 200);
                    ht.insert("key3", 300);
                    System.out.println("Value for key1: " + ht.search("key1"));
                    ht.delete("key1");
                    System.out.println("Value for key1: " + ht.search("key1"));
          }
}